<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard</title>
    <style>
        /* Importing funky Google font */
@import url('https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap');

/* Full page styling */
body {
    margin: 0;
    padding: 0;
    font-family: 'Press Start 2P', cursive;
    background: linear-gradient(45deg, #1e0e62, #ff007f, #ff8c00, #4b0082);
    background-size: 400% 400%;
    animation: gradientAnimation 10s ease infinite;
    height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
}

/* Neon animation for background */
@keyframes gradientAnimation {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
}

/* Container styling */
.container {
    background: rgba(0, 0, 0, 0.7);
    border: 3px dashed #ff007f;
    border-radius: 15px;
    padding: 40px;
    max-width: 400px;
    width: 100%;
    text-align: center;
    box-shadow: 0 0 20px #ff007f, 0 0 30px #ff8c00;
    transition: transform 0.5s ease;
}

.container:hover {
    transform: scale(1.05) rotate(3deg);
}

/* Funky header text */
h2 {
    color: #fff;
    font-size: 28px;
    text-shadow: 0 0 10px #ff007f, 0 0 20px #ff8c00;
    margin-bottom: 20px;
}

/* Input fields with wild neon borders */
input[type="text"], 
input[type="password"], 
input[type="email"], 
input[type="tel"] {
    width: 100%;
    padding: 15px;
    margin: 10px 0;
    border: 2px solid #4b0082;
    border-radius: 8px;
    background: transparent;
    color: #fff;
    font-size: 18px;
    text-shadow: 0 0 5px #fff;
    transition: all 0.3s ease;
}

input:focus {
    outline: none;
    border-color: #ff007f;
    box-shadow: 0 0 15px #ff007f, 0 0 25px #ff8c00;
}

/* Flashing button styles */
button {
    width: 100%;
    padding: 15px;
    margin-top: 15px;
    border: none;
    border-radius: 10px;
    background-color: #ff007f;
    color: #fff;
    font-size: 20px;
    cursor: pointer;
    text-shadow: 0 0 10px #fff;
    box-shadow: 0 0 15px #ff007f, 0 0 25px #ff8c00;
    animation: glow 1.5s ease-in-out infinite alternate;
    transition: all 0.2s ease-in-out;
}

button:hover {
    transform: scale(1.1);
    background-color: #ff8c00;
}

/* Glowing button animation */
@keyframes glow {
    from {
        box-shadow: 0 0 15px #ff007f, 0 0 25px #ff8c00;
    }
    to {
        box-shadow: 0 0 30px #ff007f, 0 0 50px #ff8c00;
    }
}

/* Cool links */
a {
    color: #ff007f;
    text-decoration: none;
    font-size: 18px;
    display: inline-block;
    margin-top: 10px;
    transition: color 0.3s ease, transform 0.3s;
}

a:hover {
    color: #fff;
    transform: skewX(10deg) rotate(-3deg);
    text-shadow: 0 0 5px #fff;
}

/* Checkbox with a bounce effect */
input[type="checkbox"] {
    margin-right: 10px;
    transform: scale(1.5);
}

input[type="checkbox"]:hover {
    animation: bounce 0.5s ease-in-out infinite alternate;
}

@keyframes bounce {
    from {
        transform: scale(1.5) translateY(0);
    }
    to {
        transform: scale(1.5) translateY(-10px);
    }
}

/* Responsive design tweaks */
@media (max-width: 480px) {
    .container {
        padding: 20px;
    }

    h2 {
        font-size: 20px;
    }

    input, button {
        font-size: 14px;
    }
}

    </style>
</head>
<body>
    <h1>Admin Dashboard</h1>

    <table border="1">
        <tr>
            <th>Name</th>
            <th>Email</th>
            <th>Phone</th>
            <th>Approval Status</th>
            <th>Action</th>
        </tr>
        {{#each users}}
        <tr>
            <td>{{this.name}}</td>
            <td>{{this.gmail}}</td>
            <td>{{this.phone}}</td>
            <td>{{#if this.isApproved}}Approved{{else}}Not Approved{{/if}}</td>
            <td>
                <form action="/approve-reject" method="post" style="display: inline;">
                    <input type="hidden" name="userId" value="{{this._id}}">
                    <button name="action" value="approve">Approve</button>
                </form>
                <form action="/approve-reject" method="post" style="display: inline;">
                    <input type="hidden" name="userId" value="{{this._id}}">
                    <button name="action" value="reject">Reject</button>
                </form>
            </td>
              </td>
            <td>
                <!-- Admin reply to the user -->
                <input type="text" id="adminMessageInput-{{this._id}}" placeholder="Type a message">
                <button onclick="sendAdminMessage('{{this._id}}')">Send</button>
            </td>
        </tr>
        {{/each}}
    </table>

    <!-- Message Display Box -->
    <div id="messageBox" style="border: 1px solid #ccc; padding: 10px; width: 100%; height: 200px; overflow-y: scroll;">
        <!-- Messages will appear here -->
    </div>

    <!-- Message Input and Send Button -->
    <input type="text" id="messageInput" placeholder="Type your message here">
    <button id="sendButton">Send</button>

   <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();

        // Define userId and userName from the template
        const userId = "{{user._id}}"; // Assuming `user._id` is available
        const userName = "{{user.name}}"; // Assuming `user.name` is available

        // Function to send messages with the user's name and message
        function sendMessage() {
            const messageInput = document.getElementById('messageInput');
            const message = messageInput.value.trim();

            if (message) {
                socket.emit('sendMessage', { userId, message, userName }); // Send userId, message, and userName
                messageInput.value = ''; // Clear input after sending
            }
        }

        // Listen for incoming messages with the username
        socket.on('receiveMessage', (data) => {
            const messageBox = document.getElementById('messageBox');
            const newMessage = document.createElement('div');
            newMessage.textContent = `${data.userName}: ${data.message}`; // Display userName with the message
            messageBox.appendChild(newMessage);
            messageBox.scrollTop = messageBox.scrollHeight; // Auto-scroll to the latest message
        });

        // Send button click event
        document.getElementById('sendButton').addEventListener('click', sendMessage);

        // Allow Enter key to send message
        document.getElementById('messageInput').addEventListener('keypress', function(event) {
            if (event.key === 'Enter') {
                sendMessage();
            }
        });
    </script>   
</body>
</html>
